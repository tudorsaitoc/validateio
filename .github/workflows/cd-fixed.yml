name: Fixed CD

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
    
    - name: Delete existing service (if needed)
      continue-on-error: true
      run: |
        echo "Checking for existing service..."
        if gcloud run services describe validateio-backend --region=${{ secrets.GCP_REGION }} 2>/dev/null; then
          echo "Service exists. For this deployment, we'll update it."
          # Uncomment the next line if you want to delete and recreate
          # gcloud run services delete validateio-backend --region=${{ secrets.GCP_REGION }} --quiet
        else
          echo "Service doesn't exist, will create new one."
        fi
    
    - name: Deploy to Cloud Run
      run: |
        cd backend
        
        # Deploy from source with explicit Dockerfile
        gcloud run deploy validateio-backend \
          --source=. \
          --region=${{ secrets.GCP_REGION }} \
          --platform=managed \
          --allow-unauthenticated \
          --set-env-vars="DATABASE_URL=${{ secrets.DATABASE_URL }}" \
          --set-env-vars="SUPABASE_URL=${{ secrets.SUPABASE_URL }}" \
          --set-env-vars="SUPABASE_ANON_KEY=${{ secrets.SUPABASE_ANON_KEY }}" \
          --set-env-vars="OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" \
          --set-env-vars="JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" \
          --set-env-vars="ENVIRONMENT=production" \
          --set-env-vars="USE_SUPABASE_AUTH=true" \
          --min-instances=0 \
          --max-instances=10 \
          --memory=1Gi \
          --quiet
    
    - name: Get service URL and test
      run: |
        SERVICE_URL=$(gcloud run services describe validateio-backend --region=${{ secrets.GCP_REGION }} --format="value(status.url)")
        echo "üöÄ Service deployed to: $SERVICE_URL"
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV
        
        # Wait a bit for service to be ready
        sleep 10
        
        # Test health endpoint
        echo "Testing health endpoint..."
        if curl -f "$SERVICE_URL/health"; then
          echo "‚úÖ Health check passed!"
        else
          echo "‚ùå Health check failed"
          exit 1
        fi