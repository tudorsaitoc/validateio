name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - production
          - staging
      release_notes:
        description: 'Release notes'
        required: false
        type: string

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Generate Release Notes
      id: release_notes
      run: |
        if [ -z "${{ github.event.inputs.release_notes }}" ]; then
          NOTES=$(git log --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD)
        else
          NOTES="${{ github.event.inputs.release_notes }}"
        fi
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        echo "$NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.version }}
        release_name: Release ${{ github.event.inputs.version }}
        body: |
          ## Release ${{ github.event.inputs.version }}
          
          ### Environment: ${{ github.event.inputs.environment }}
          
          ### Changes:
          ${{ steps.release_notes.outputs.notes }}
          
          ### Docker Images:
          - Backend: `${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/validateio/backend:${{ github.event.inputs.version }}`
          - Frontend: `${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/validateio/frontend:${{ github.event.inputs.version }}`
        draft: false
        prerelease: ${{ github.event.inputs.environment == 'staging' }}

  build-and-tag:
    name: Build and Tag Images
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        service: [backend, frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v2
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
    
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    
    - name: Configure Docker
      run: |
        gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev
    
    - name: Build and Push Docker Image
      run: |
        docker build -t ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/validateio/${{ matrix.service }}:${{ github.event.inputs.version }} \
          -t ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/validateio/${{ matrix.service }}:latest \
          -f ${{ matrix.service }}/Dockerfile.prod \
          ${{ matrix.service }}/
        
        docker push ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/validateio/${{ matrix.service }}:${{ github.event.inputs.version }}
        docker push ${{ secrets.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/validateio/${{ matrix.service }}:latest

  deploy-release:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: build-and-tag
    if: github.event.inputs.environment == 'production'
    
    steps:
    - name: Trigger Production Deployment
      uses: peter-evans/repository-dispatch@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        event-type: deploy-production
        client-payload: '{"version": "${{ github.event.inputs.version }}"}'

  create-backup:
    name: Create Database Backup
    runs-on: ubuntu-latest
    needs: create-release
    if: github.event.inputs.environment == 'production'
    
    steps:
    - name: Create Supabase Backup
      run: |
        curl -X POST \
          -H "Authorization: Bearer ${{ secrets.SUPABASE_SERVICE_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"name": "pre-release-${{ github.event.inputs.version }}"}' \
          "${{ secrets.SUPABASE_URL }}/storage/v1/object/backups/create"

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-release, build-and-tag]
    if: always()
    
    steps:
    - name: Send release notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          New Release Created: ${{ github.event.inputs.version }}
          Environment: ${{ github.event.inputs.environment }}
          Status: ${{ needs.build-and-tag.result }}
          Release URL: ${{ needs.create-release.outputs.html_url }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}